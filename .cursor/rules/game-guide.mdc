---
description: 
globs: 
alwaysApply: false
---
Hier ist eine detaillierte Beschreibung deines geplanten Browser-Games im Stil der Screenshots (ähnlich einem "Merge Troops"- oder "Defense Road"-Game), basierend auf deiner gewählten Technologie-Architektur (Phaser 3 + WebPack + TypeScript):

---

## 🎮 **Spielbeschreibung: "Defense Bridge"**

### 🌉 **Setting & Ziel**

Du bist Kommandant eines Trupps von Soldaten, der eine Brücke oder Straße gegen anstürmende Feinde verteidigen muss. Die Gegner kommen wellenartig von vorne auf dich zu. Auf dem Weg befinden sich Upgrade-Felder (z. B. +1 Soldat, neue Waffe, Multiplikator), die du strategisch einsammelst, um deine Truppe zu stärken. Dein Ziel ist es, möglichst viele Gegnerwellen zu überstehen und den Endboss zu besiegen.

---

## 🧱 **Grundlegende Architektur (Technisch)**

* **Engine:** Phaser 3
* **Sprache:** TypeScript
* **Build-System:** WebPack (für Module, Hot Reload, Assets)
* **Canvas-Rendering:** WebGL (Fallback: Canvas)
* **Asset Management:** über `webpack-loader` (für Bilder, Sounds)

---

## 🔁 **Spielablauf**

### 1. **Startphase**

* Der Spieler beginnt mit einer kleinen Gruppe Soldaten (z. B. 10 Einheiten).
* Die Soldaten marschieren automatisch geradeaus.
* Der Spieler hat keine direkte Bewegungskontrolle, kann aber taktische Entscheidungen treffen (z. B. Pfadwahl bei Gabelungen, Upgrades sammeln).

### 2. **Levelstruktur**

* Die Straße/Brücke ist in Segmente unterteilt.
* In regelmäßigen Abständen gibt es:

  * **Upgrade-Plattformen**: z. B. `+10 Soldaten`, `x2`, `+50% Damage`, `Neue Einheitentypen`.
  * **Feindliche Sperren**: Gruppen von Gegnern mit Lebenspunkten.
  * **Eliten oder Bosse**: Am Ende eines Levels.
* Der Spieler muss zwischen Pfaden wählen, z. B.:

  * Links: +10 Soldaten
  * Rechts: x2 Schaden

### 3. **Kämpfe**

* Sobald die Truppen den Gegner erreichen, startet ein automatischer Kampf.
* Kampfsystem basiert auf HP/DPS:

  * Truppen haben Lebenspunkte und Schadenswerte.
  * Angriffe erfolgen in regelmäßigen Intervallen (z. B. pro Sekunde).
* Der Kampf geht weiter, bis entweder der Gegner oder die Spielertruppe besiegt ist.

### 4. **Upgrade-System**

* Im Spielverlauf werden Upgrades automatisch aktiviert, wenn die Truppen sie durchlaufen.
* Upgrade-Typen:

  * **Mehr Einheiten:** +10, +20, +50
  * **Multiplikator:** x2, x3
  * **Waffen:** Maschinengewehr, Lasergewehr, Flammenwerfer
  * **Spezialeinheiten:** Panzer, Helden

### 5. **Ressourcen & UI**

* Oben links: Spielerinfo, Gold, Punkte
* Fortschrittsanzeige: Wie weit der Spieler in einem Level ist
* Oben rechts: Gegneranzeige (HP, Typ)
* Animierte Kampfaktionen (Laser, Explosionen, Schüsse)

### 6. **Ende eines Levels**

* Nach der letzten Gegnerwelle erscheint ein Endboss.
* Wenn der Spieler gewinnt:

  * Punkte & Goldbelohnung
  * Möglichkeit zum Truppen-Upgrade
  * Nächstes Level wird freigeschaltet
* Wenn der Spieler verliert:

  * Möglichkeit zur Wiederholung
  * Optionale Werbung oder Power-Up (für mobile Version)

---

## 🔧 **Geplante Features**

| Feature              | Beschreibung                                       |
| -------------------- | -------------------------------------------------- |
| Automatischer Marsch | Die Einheiten bewegen sich selbstständig vorwärts. |
| Pfadentscheidungen   | Der Spieler wählt Upgrades durch Routenwahl.       |
| Kampf-Animationen    | Laser, Explosionen, Healthbars, Effekte            |
| Fortschrittsanzeige  | Zeigt verbleibende Gegnerwellen                    |
| Verschiedene Gegner  | Schwache Gegner, gepanzerte Einheiten, Bosse       |
| Einheitentypen       | Nahkämpfer, Fernkämpfer, Spezialisten              |
| Audioeffekte         | Kampfgeräusche, Musik, Voice-Overs                 |

---

## 🎨 **Grafikstil**

* **Stil:** Comic/Low-Poly 3D-Optik in isometrischer Perspektive (wie auf deinem Screenshot)
* **Farben:** Lebendige Farben, klar unterscheidbare Einheiten
* **Animationen:** Bewegungsanimation, Kampfanimation, Partikeleffekte bei Upgrades

---

## 🧩 **Level-Design (Modular)**

* Level bestehen aus Blöcken:

  * `[Upgrade]` → `[Gegnerwelle]` → `[Upgrade]` → `[Boss]`
* Blöcke können aus JSON-Dateien geladen werden → ermöglicht später einfache Level-Erstellung.

---

Möchtest du als Nächstes die Phaser-Projektstruktur mit Webpack und TypeScript sehen oder ein Beispiel-Level mit einfachen Platzhaltern?
